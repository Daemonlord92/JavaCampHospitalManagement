package com.mattevaitcs.hospital_management;

import com.github.javafaker.Faker;
import com.mattevaitcs.hospital_management.entities.Patient;
import com.mattevaitcs.hospital_management.entities.enums.BiologicalSex;
import com.mattevaitcs.hospital_management.repositories.PatientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

@SpringBootApplication
public class HospitalManagementApplication implements CommandLineRunner {

    @Autowired
    private PatientRepository patientRepository;

	public static void main(String[] args) {
		SpringApplication.run(HospitalManagementApplication.class, args);
	}

    @Override
    public void run(String... args) throws Exception {
        if(patientRepository.count() > 0) {
            System.out.println("Patients already exist in the database. Skipping data generation.");

            patientRepository.findAllByDobOrderByLnameAsc(LocalDate.of(1981, 5, 19
            )).forEach(System.out::println);

            patientRepository.searchByName("L").forEach(System.out::println);

            return;
        }
        Faker faker = new Faker();
        Random random = new Random();
        List<Patient> patients = new ArrayList<>();

        for (int i = 0; i < 50; i++) {
            String fname = faker.name().firstName();
            String lname = faker.name().lastName();
            LocalDate dob = LocalDate.now().minusYears(10 + random.nextInt(70)).minusDays(random.nextInt(365));
            BiologicalSex biologicalSex = BiologicalSex.values()[random.nextInt(BiologicalSex.values().length)];
            String phone = faker.phoneNumber().cellPhone();
            String address = faker.address().fullAddress();
            List<String> allergies = List.of(faker.medical().diseaseName(), faker.medical().symptoms());

            Patient patient = new Patient(
                    0L, // id will be generated by DB if persisted
                    fname,
                    lname,
                    dob,
                    biologicalSex,
                    phone,
                    address,
                    allergies
            );
            patients.add(patient);
            System.out.println(patient);
        }

        patientRepository.saveAll(patients);
        System.out.println("Sample patients generated and saved to the database.");
    }
}
